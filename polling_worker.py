#!/usr/bin/env python3
"""
Polling worker for Telegram.

- –¢–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN.
- –ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º —É–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ (—á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª —Å polling).
- –ï—Å–ª–∏ –∑–∞–¥–∞–Ω $PORT (Render Web Service) ‚Äî –ø–æ–¥–Ω–∏–º–∞–µ–º / –∏ /healthz, —á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç.
- –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ –≥–æ–Ω—è–µ–º ingestion, –µ—Å–ª–∏ –∫–µ—à–µ–π –µ—â—ë –Ω–µ—Ç.
- –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã: /start –∏ –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏).
"""

import os
import sys
import asyncio
import logging
import subprocess

from aiogram import Bot, types, Router, F
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ Dispatcher, —á—Ç–æ –∏ –≤ webhook.py (–µ—Å–ª–∏ —Ç–∞–º —á—Ç–æ-—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ)
from webhook import dp  # noqa: F401

# ---------- –ú–∏–Ω–∏ HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (–Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ Web Service —Å $PORT) ----------
from fastapi import FastAPI, Response
import uvicorn

_health_app = FastAPI()

@_health_app.get("/")
def root():
    return {"status": "ok", "service": "polling-worker"}

@_health_app.head("/")
def head_root():
    # Render —á–∞—Å—Ç–æ —à–ª—ë—Ç HEAD /
    return Response(status_code=200)

@_health_app.get("/healthz")
def healthz():
    return {"ok": True}

async def run_health_server_if_needed() -> None:
    """
    –ï—Å–ª–∏ $PORT –∑–∞–¥–∞–Ω (Render Web Service) ‚Äî –ø–æ–¥–Ω–∏–º–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π HTTP-—Å–µ—Ä–≤–µ—Ä,
    —á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç –∏ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª –ø—Ä–æ—Ü–µ—Å—Å.
    –ï—Å–ª–∏ $PORT –Ω–µ—Ç (Background Worker) ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.
    """
    port = os.getenv("PORT")
    if not port:
        logging.info("[POLL] No $PORT -> health server is not started (worker mode).")
        return
    port = int(port)
    logging.info(f"[POLL] Starting health server on :{port}")
    config = uvicorn.Config(_health_app, host="0.0.0.0", port=port, log_level="info")
    server = uvicorn.Server(config)
    await server.serve()
# ---------------------------------------------------------------------------------------------


def _run_ingestion_if_needed() -> None:
    """
    –ü—Ä–æ–≥–æ–Ω–∏–º ingestion –æ–¥–∏–Ω —Ä–∞–∑, –µ—Å–ª–∏ –∫–µ—à–µ–π –µ—â—ë –Ω–µ—Ç.
    """
    about_ok = os.path.exists("data/about_cache.txt")
    faq_ok = os.path.exists("data/faq_cache.json")
    if about_ok and faq_ok:
        logging.info("[POLL] Cache detected. Skipping ingestion.")
        return
    logging.info("[POLL] No cache detected. Running ingestion...")
    try:
        subprocess.run([sys.executable, "ingestion.py"], check=False)
    except Exception as e:
        logging.warning("[POLL] ingestion failed: %s", e)


# ----------------- –ë–ê–ó–û–í–´–ï –•–≠–ù–î–õ–ï–†–´ (–¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ, —á—Ç–æ–±—ã –±–æ—Ç —Ç–æ—á–Ω–æ –æ—Ç–≤–µ—á–∞–ª) ----------------
basic_router = Router()

@basic_router.message(CommandStart())
async def on_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏ üëã\n"
        "–ù–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—á—É. –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç."
    )

@basic_router.message(F.text)
async def on_any_text(message: types.Message):
    # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç-—ç—Ö–æ, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç
    await message.answer(f"–ü—Ä–∏–Ω—è–ª: ¬´{message.text}¬ª. –°–µ–π—á–∞—Å –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ")
# ------------------------------------------------------------------------------------------------


async def run_polling() -> None:
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not token:
        raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")

    # aiogram >= 3.7: parse_mode –∑–∞–¥–∞—ë–º —á–µ—Ä–µ–∑ DefaultBotProperties
    bot = Bot(token=token, default=DefaultBotProperties(parse_mode="HTML"))

    # –í–ê–ñ–ù–û: —É–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫, –∏–Ω–∞—á–µ Telegram –Ω–µ –±—É–¥–µ—Ç —Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ long polling
    drop = os.getenv("DROP_UPDATES_ON_START", "true").lower() in ("1", "true", "yes", "y")
    try:
        await bot.delete_webhook(drop_pending_updates=drop)
        logging.info("[POLL] delete_webhook ok (drop=%s)", drop)
    except Exception as e:
        logging.warning("[POLL] delete_webhook failed: %s", e)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã (–∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –≤ webhook.py –∫ dp)
    try:
        from webhook import dp as _dp  # —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤—ã—à–µ
        _dp.include_router(basic_router)
    except Exception as e:
        logging.warning("[POLL] include_router(basic_router) failed: %s", e)

    logging.info("[POLL] Starting dp.start_polling() ...")
    # –ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º allowed_updates ‚Äî –ø—É—Å—Ç—å –ø—Ä–∏—Ö–æ–¥—è—Ç –≤—Å–µ —Ç–∏–ø—ã
    from webhook import dp as _dp
    await _dp.start_polling(bot)


async def main() -> None:
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–¥–Ω–∏–º–µ–º health-—Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω) –∏ –∑–∞–ø—É—Å—Ç–∏–º polling
    health_task = asyncio.create_task(run_health_server_if_needed())
    polling_task = asyncio.create_task(run_polling())

    done, pending = await asyncio.wait(
        {health_task, polling_task},
        return_when=asyncio.FIRST_EXCEPTION,
    )

    for t in pending:
        t.cancel()
    for t in done:
        exc = t.exception()
        if exc:
            raise exc


if __name__ == "__main__":
    logging.basicConfig(
        level=os.getenv("LOG_LEVEL", "INFO"),
        format="%(asctime)s %(levelname)s %(message)s",
        stream=sys.stdout,
    )
    _run_ingestion_if_needed()
    asyncio.run(main())
